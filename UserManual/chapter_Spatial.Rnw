%% See http://yihui.name/knitr/demo/child/ for documentation on the parent/child document system of knitr
%
% Rscript -e "library(knitr);  knit2pdf('includesSpatialOnly.Rnw')"; open -a "Google Chrome" includesSpatialOnly.pdf
%


\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

\chapter{Spatial models}
\label{cha:spatial}


NIMBLE supports two variations of conditional autoregressive (CAR) model
structures: the improper intrinsic Gaussian CAR (ICAR) model, and
a proper Gaussian CAR model.  This includes distributions to represent these
spatially-dependent model structures in a BUGS model,
as well as specialised MCMC samplers for these distributions.

 

\section{Intrinsic Gaussian CAR model: \cd{dcar\_normal}}

The intrinsic Gaussian conditional autoregressive (ICAR) model for
spatially-dependent regions is implemented in NIMBLE as the \cd{dcar\_normal}
distribution.

ICAR models are improper priors for random fields (e.g., temporal or spatial processes). The prior is a joint prior across a collection of latent process values. For more technical details on CAR models, including higher-order CAR models, please see \citep{Rue_Held_2005}, \citep{Banerjee_etal_2015}, and \citep{Paciorek_2009}. Since the distribution is improper it should not be used as the distribution for data values, but rather to specify a prior for an unknown process. As discussed in the references above, the distribution can be seen to be a proper density in a reduced dimension subspace; thus the impropriety only holds on one or more linear combinations of the latent process values. 

\subsection{Specification and density}

NIMBLE uses the same parameterization as WinBUGS / GeoBUGS for the \cd{dcar\_normal} distribution, providing
compatibility with existing WinBUGS code.  NIMBLE also provides the WinBUGS name \cd{car.normal} as an alias.

\subsubsection*{Specification}
 
The \cd{dcar\_normal} distribution is specified for a set of \cd{N} spatially dependent regions as:

$$\texttt{x[1:N] $\sim$ dcar\_normal(adj, weights, num, tau, c, zero\_mean)}$$

The \cd{adj}, \cd{weights} and \cd{num} parameters define the adjacency structure and associated weights of the spatially-dependent field.  See \cd{help(CAR-Normal)} for details of these parameters.  When specifying a CAR distribution, these parameters must have constant values.  They do not necessarily have to be specified as \cd{constants} when creating a model object using \cd{nimbleModel}, but they should be defined in a static way: as right-hand-side only variables with initial values provided as \cd{constants}, \cd{data} or \cd{inits}, or using fixed numerical deterministic declarations.  Each of these two approaches for specifying values are shown in the example.

The adjacency structure defined by \cd{adj} and the associated \cd{weights} must be symmetric.  That is, if region $i$ is neighbor of region $j$, then region $j$ must also be a neighbor of region $i$.  Further, the weights associated with these reciprocating relationships must be equal.  NIMBLE performs a check of these symmetries and will issue an error message if asymmetry is detected.

The scalar precision \cd{tau} may be treated as an unknown model parameter and itself assigned a prior distribution.  Care should be taken in selecting a prior distribution for \cd{tau}, and WinBUGS suggests that users be prepared to carry out a sensitivity analysis for this choice.

When specifying a higher-order CAR process, the number of constraints \cd{c} can be explicitedly provided in the model specification.  This would be the case, for example, when specifying a thin-plate spline (second-order) CAR model, for which \cd{c} should be 2 for a one-dimensional process and 3 for a two-dimensional (e.g., spatial) process, as discussed in \citep{Rue_Held_2005} and \citep{Paciorek_2009}.  If  \cd{c} is omitted, NIMBLE will calculate \cd{c} as the number of disjoint groups of regions in the adjacency structure, which implicitly assumes a first-order CAR process for each group.

By default there is no zero-mean constraint imposed on the CAR process, and thus the mean is implicit within the CAR process values, with an implicit improper flat prior on the mean.  To avoid non-identifiability, one should not include an additional parameter for the mean (e.g., do not include an intercept term in a simple CAR model with first-order neighborhood structure). When there are disjoint groups of regions and the constraint is not imposed, there is an implicit distinct improper flat prior on the mean for each group, and it would not make sense to impose the constraint since the constraint holds across all regions. Similarly if one sets up a neighborhood structure for higher-order CAR models, it would not make sense to impose the zero-mean constraint as that would account for only one of the eigenvalues that are zero. Imposing this contraint (by specifying the parameter \cd{zero\_mean = 1}) allows users to model the process mean separately, and hence a separate intercept term should be included in the model.

NIMBLE provides a convenience function \cd{as.carAdjacency} for converting other representations of the adjacency information into the required \cd{adj}, \cd{weights}, \cd{num} format.  This function can convert:

\begin{itemize}
\item A symmetric adjacency matrix of weights (with diagonal elements equal to zero), using \cd{as.carAdjacency(weightMatrix)}
\item Two length-\cd{N} lists with numeric vector elements giving the neighboring indices and associated weights for each region, using \cd{as.carAdjacency(neighborList, weightList)}
\end{itemize}
 
These conversions should be done in R, and the resulting \cd{adj}, \cd{weights}, \cd{num} vectors can be passed as \cd{constants} into \cd{nimbleModel}.



\subsubsection*{Density}

For process values $x = (x_1, \ldots, x_N)$ and precision $\tau$, the improper CAR density is given as:

$$p(x | \tau) \propto \tau^{(N-c)/2} \; e^{ -\tfrac{\tau}{2} \sum_{i\ne j} w_{ij} \, (x_i-x_j)^2 }$$

\noindent where the summation over all $(i,j)$ pairs, with the weight between regions $i$ and $j$ given by $w_{ij}$, is equivalent to summing over all pairs for which region $i$ is a neighbor of region $j$.  Note that the value of $c$ modifies the power to which the precision is raised, accounting for the impropriety of the density based on the number of zero eigenvalues in the implicit precision matrix for $x$.

For the purposes of MCMC sampling the individual CAR process values, the resulting conditional prior of region $i$ is:

$$p(x_i | x_{-i}, \tau) \sim \text{N} \left( \tfrac{1}{w_{i+}} \textstyle\sum_{j \in \mathcal{N}_i } w_{ij} \, x_j,  \; w_{i+} \tau \right)$$

\noindent where $x_{-i}$ represents all elements of $x$ except $x_{i}$, the neighborhood $\mathcal{N}_i$ of region $i$ is the set of all $j$ for which region $j$ is a neighbor of region $i$, $w_{i+} = \sum_{j \in \mathcal{N}_i} w_{ij}$, and the Normal distribution is parameterised in terms of precision.



\subsection{Example}

Here we provide an example model using the intrinsic Gaussian \cd{dcar\_normal} distribution. The CAR process values are used in a spatially-dependent Poisson regression.  

To mimic the behavior of WinBUGS, we specify \cd{zero\_mean = 1} to enforce a zero-mean constraint on the CAR process, and therefore include a separate intercept term \cd{alpha} in the model. Note that we do not necessarily recommend imposing this constraint, per the discussion earlier in this chapter.

<<dcar_normal_Chunk, results = "hide", message = FALSE>>=
code <- nimbleCode({
    alpha ~ dflat()
    beta ~ dnorm(0, 0.0001)
    tau ~ dgamma(0.001, 0.001)
    for(k in 1:L)
        weights[k] <- 1
    s[1:N] ~ dcar_normal(adj[1:L], weights[1:L], num[1:N], tau, zero_mean = 1)
    for(i in 1:N) {
        log(lambda[i]) <- alpha + beta*x[i] + s[i]
        y[i] ~ dpois(lambda[i])
    }
})

constants <- list(N = 4, L = 8, num = c(3, 2, 2, 1),
                  adj = c(2,3,4,1,3,1,2,1), x = c(0, 2, 2, 8))

data <- list(y = c(6, 9, 7, 12))

inits <- list(alpha = 0, beta = 0, tau = 1, s = c(0, 0, 0, 0))

Rmodel <- nimbleModel(code, constants, data, inits)
@
  
The resulting model may be carried through to MCMC sampling.
NIMBLE will assign a specialised sampler to the update the elements of the CAR process.
See chapter \ref{cha:mcmc} for information about NIMBLE's MCMC engine, and section
\ref{sec:spatial_mcmc_sampling_car} for details MCMC sampling of the CAR proceses.




\section{Proper Gaussian CAR model: \cd{dcar\_proper}}

The proper Gaussian conditional autoregressive model for
spatially-dependent regions is implemented in NIMBLE as the \cd{dcar\_proper}
distribution.




\subsection{Specification and density}

NIMBLE uses the same parameterization as WinBUGS / GeoBUGS for the \cd{dcar\_proper} distribution, providing
compatibility with existing WinBUGS code.  NIMBLE also provides the WinBUGS name \cd{car.proper} as an alias.

{\color{red} Chris, again can you add a technical paragraph here, explaining more about the proper CAR distribution, and its uses?}

\subsubsection*{Specification}

The \cd{dcar\_proper} distribution is specified for a set of \cd{N} spatially dependent regions as:

$$\texttt{x[1:N] $\sim$ dcar\_proper(mu, C, adj, num, M, tau, gamma)}$$

There is no option of a zero-mean constraint for proper CAR process, and instead the mean for each region is specified in the \cd{mu} parameter.  The elements of \cd{mu} can be assigned fixed values, or may be specified using one common, or multiple prior distributions.

The \cd{C}, \cd{adj} and \cd{num} parameters define the adjacency structure and associated weights of the spatially-dependent field.  See \cd{help(CAR-Proper)} for details of these parameters.  When specifying a CAR distribution, these parameters must have constant values.  They do not necessarily have to be specified as \cd{constants} when creating a model object using \cd{nimbleModel}, but they should be defined in a static way: as right-hand-side only variables with initial values provided as \cd{constants}, \cd{data} or \cd{inits}, or using fixed numerical deterministic declarations.

The adjacency structure defined by \cd{adj} must be symmetric.  That is, if region $i$ is neighbor of region $j$, then region $j$ must also be a neighbor of region $i$.

In addition, the weights specified in \cd{C} must satisfy a symmetry constraint jointly with the conditional variances given in \cd{M}.  Specifically, if region $i$ is neighbor of region $j$, then $C_{ij}M_{jj} = C_{ji}M_{ii}$, where $M$ is a diagonal matrix and $C$ is the weight matrix.  Satisfying this relationship for all neighboring regions guarantees that the matrix $M^{-1}C$ is symmetric, as this term appears in the precision matrix of the joint distribution.  NIMBLE performs a check of these symmetries and will issue an error message if asymmetry is detected.

Generating \cd{C} to satisfy this symmetry constraint can be tedious.  NIMBLE provides a convenience function \cd{CAR\_calcC} to generate a suitable value of \cd{C}.  Specifically, the values of the weights matrix are selected as $C_{ij} = \sqrt{\tfrac{M_{ii}}{M_{jj}}}$, which is easily seen to satisfy the constraint on \cd{C} and \cd{M}.  This choice is not unique, and it does impose a particular selection of the weight matix.  The advantage of this approach is not needing to generate \cd{C} yourself.  This approach to generating \cd{C} is shown in the example.

The scalar precision \cd{tau} may be treated as an unknown model parameter and itself assigned a prior distribution.  Care should be taken in selecting a prior distribution for \cd{tau}, and WinBUGS suggests that users be prepared to carry out a sensitivity analysis for this choice.

An appropriate value of the \cd{gamma} parameter ensures the propriety of the \cd{dcar\_proper} distribution.  The value of \cd{gamma} must lie between fixed bounds, which are given by the reciprocals of the largest and smallest eigenvalues of $M^{-1/2}CM^{1/2}$.  These bounds can be calculated using the function \cd{CAR\_calcBounds}, or separately using the functions \cd{CAR\_calcMinBound} and \cd{CAR\_calcMaxBound}.  For compatibility with WinBUGS, NIMBLE provides \cd{min.bound} and \cd{max.bound} as aliases for \cd{CAR\_calcMinBound} and \cd{CAR\_calcMaxBound}.  Rather than selecting a fixed value of \cd{gamma} within these bounds, it is recommended that \cd{gamma} be assigned a uniform prior distribution over the region of permissable values.  This approach is shown in the example.



\subsubsection*{Density}

The proper CAR density is given as:

$$p(x | \mu, C, M, \tau, \gamma) \sim \text{MVN} \left( \mu, \; \tfrac{1}{\tau} (I-\gamma C)^{-1} M \right)$$

\noindent where the multivariate normal distribution is parameterized in terms of covariance.

For the purposes of MCMC sampling the individual CAR process values, the resulting conditional prior of region $i$ is:

$$p(x_i | x_{-i}, \mu, C, M, \tau, \gamma) \sim \text{N} \left( \mu_i + \textstyle\sum_{j \in \mathcal{N}_i } \gamma \, C_{ij} \, (x_j - \mu_i),  \; \tfrac{M_{ii}}{\tau} \right)$$

\noindent where $x_{-i}$ represents all elements of $x$ except $x_{i}$, the neighborhood $\mathcal{N}_i$ of region $i$ is the set of all $j$ for which region $j$ is a neighbor of region $i$, and the Normal distribution is parameterised in terms of variance.




\subsection{Example}

Here we provide an example model using the proper Gaussian \cd{dcar\_proper} distribution. The CAR process values are used in a spatially-dependent logistic regression to model binary presence/absense data.


<<dcar_proper_Chunk, results = "hide", message = FALSE>>=
code <- nimbleCode({
    mu0 ~ dnorm(0, 0.0001)
    tau ~ dgamma(0.001, 0.001)
    gamma ~ dunif(gMin, gMax)
    s[1:N] ~ dcar_proper(mu[1:N], C[1:L], adj[1:L], num[1:N], M[1:N], tau, gamma)
    for(i in 1:N) {
        mu[i] <- mu0
        logit(p[i]) <- s[i]
        y[i] ~ dbern(p[i])
    }
})

adj <- c(2, 1, 3, 2, 4, 3)
num <- c(1, 2, 2, 1)
M <- rep(1, 4)
C <- CAR_calcC(adj, num, M)
bounds <- CAR_calcBounds(C, adj, num, M)

constants <- list(C = C, adj = adj, num = num, M = M, N = 4, L = 6,
                  gMin = bounds[1], gMax = bounds[2])

data <- list(y = c(1, 0, 1, 1))

inits <- list(mu0 = 0, tau = 1, gamma = mean(bounds), s = rep(0, 4))

Rmodel <- nimbleModel(code, constants, data, inits)
@

The resulting model may be carried through to MCMC sampling.
NIMBLE will assign a specialised sampler to the update the elements of the CAR process.
See chapter \ref{cha:mcmc} for information about NIMBLE's MCMC engine, and section
\ref{sec:spatial_mcmc_sampling_car} for details MCMC sampling of the CAR proceses.





\section{MCMC Sampling of CAR models}
\label{sec:spatial_mcmc_sampling_car}

NIMBLE's MCMC engine provides specialised samplers for the \cd{CAR\_normal} and \cd{CAR\_proper} distributions.  These samplers perform sequential univariate updates on the components of the CAR process.  Internally, each sampler assigns one of three specialized univariate samplers to each component, based on inspection of the model structure:

\begin{enumerate}
\item A conjugate sampler in the case of conjugate Normal dependencies.
\item A random walk Metropolis-Hastings sampler in the case of non-conjugate dependencies.
\item A posterior predictive sampler in the case of no dependencies.
\end{enumerate}

Note that these univariate CAR samplers are not the same as NIMBLE's standard \cd{conjugate}, \cd{RW}, and \cd{posterior\_predictive}  samplers, but rather specialized versions for operating on a CAR distribution.  Details of these assignments are strictly internal to the CAR samplers.

In future versions of NIMBLE we expect to provide block samplers that update the entire CAR process as a single sample.  This may provide improved MCMC performance by accounting for dependence between elements, particularly when conjugacy is available.


\subsection{Initial values}

Valid initial values should be provided for all elements of the process specified by a CAR structure before running an MCMC.  This ensures that the conditional prior distribution is well-defined for each region.  A simple and safe choice of initial values is setting all components of the process equal to zero, as is done in the preceeding CAR examples.

For compatibility with WinBUGS, NIMBLE also allows an initial value of \cd{NA} to be provided for zero-neighbor regions.  This particular initialization is required in WinBUGS, so this allows users to make use of existing WinBUGS code.



\subsection{Zero-neighbour regions}

Regions with no neighbors (defined by a 0 appearing in the \cd{num} parameter) are a special case.  The corresponding neighborhood $\mathcal{N}$ contains no elements, and hence the conditional prior is improper and uninformative, tantamount to a \cd{dflat} prior distribution.  Thus, the posterior distribution is entirely determined by the dependent nodes, if any.  Sampling of these zero-neighbor regions proceeds as:

\begin{itemize}
\item In the conjugate case, sampling proceeds according to the conjugate posterior.
\item In the non-conjugate case, sampling proceeds using random walk Metropolis-Hastings, where the posterior is determined entirely by the dependencies.
\item In the case of no dependents, the posterior is entirely undefined.  Here, no changes will be made to the process value, and it will remain equal to its initial value throughout.  By virture of having no neighbors, this region does not contribute to the density evaluation of the CAR node nor to the conditional prior of any other regions, hence its value (even \cd{NA}) is of no consequence.
\end{itemize}

This behavior is different from that of WinBUGS, where the value of zero-neighbor regions is set to and fixed at zero.



\subsection{Zero-mean constraint}

A zero-mean constraint is available for the intrinsic Gaussian \cd{dcar\_normal distribution}, only.  This constraint on the ICAR process values is imposed during MCMC sampling, if the argument \cd{zero\_mean = 1}, mimicing the behavior of WinBUGS.  Following the univariate updates on each component, the mean is subtracted away from all process values, resulting in a zero-mean process.

Note that this is \emph{not} equivalent to sampling under the constraint that the mean is zero (see p. 36 of \citep{Rue_Held_2005}) so should be treated as an ad hoc approach and employed with caution.






